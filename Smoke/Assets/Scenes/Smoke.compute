#pragma kernel Advect
#pragma kernel ComputeVorticity
#pragma kernel VorticityConfinement
#pragma kernel ApplyBuoyancy
#pragma kernel Force
#pragma kernel ProjectSetup
#pragma kernel Project
#pragma kernel Diffuse1
#pragma kernel Diffuse2
#pragma kernel AdvectTemperature
#pragma kernel TemperatureSource
#pragma kernel AdvectDensity
#pragma kernel DensitySource
#include <cubUtil.hlsl>


// Common parameter
float DeltaTime;
float Epsilon;
float Buoyancy;
float Weight;
float densityAmount;
float densityDissipation;
float temperatureAmount;
float temperatureDissipation;
float velocityDissipation;

// External force
float2 ForceOrigin;
float2 ForceVector;
float ForceExponent;

// U (velocity field)
Texture2D<float2> U_in;
RWTexture2D<float2> U_out;

// W (velocity field; working)
Texture2D<float2> W_in;
RWTexture2D<float2> W_out;

// Div W  
RWTexture2D<float> DivW_out;

// P (pressure field)
Texture2D<float> P_in;
RWTexture2D<float> P_out;

// Jacobi method arguments
float Alpha, Beta;

Texture2D<float> X1_in;
Texture2D<float> B1_in;
RWTexture2D<float> X1_out;

Texture2D<float2> X2_in;
Texture2D<float2> B2_in;
RWTexture2D<float2> X2_out;

// D (density field)
Texture2D<float> D_in;
RWTexture2D<float> D_out;

// T (temperature field)
Texture2D<float> T_in;
RWTexture2D<float> T_out;

// Vorticity (vorticity field)
Texture2D<float> VC_in;
RWTexture2D<float> VC_out;

// AdvectVelocity step
[numthreads(8, 8, 1)]
void Advect(uint2 tid : SV_DispatchThreadID)
{
    uint2 dim;
    W_out.GetDimensions(dim.x, dim.y);

    /*float2 uv = (tid + 0.5) / dim;
    float2 duv = U_in[tid] * DeltaTime;
    float2  pos = (float2) (uv - duv) * dim;*/

    float2 uv = (tid + 0.5);
    float2 duv = U_in[tid] * DeltaTime;
    float2  pos = (float2) (uv - duv);

    float2 velocity = f2SampleCubic(U_in, pos, dim)* velocityDissipation;
    //float2 velocity = SampleBilinear(U_in, pos, dim)*velocityDissipation;

    W_out[tid] = velocity;

}

// Vorticity Computation
[numthreads(8, 8, 1)]
void ComputeVorticity(uint2 tid : SV_DispatchThreadID)
{
    uint2 dim;
    VC_out.GetDimensions(dim.x, dim.y);

    if (any(tid == 0) || any(tid == dim - 1)) return;

    int2 tidL = max(0, tid - int2(1,0));
    int2 tidR = min(dim - 1, tid + int2(1, 0));
    int2 tidB = max(0, tid - int2(0, 1));
    int2 tidT = min(dim - 1, tid + int2(0, 1));

    float2 L = U_in[tidL];
    float2 R = U_in[tidR];

    float2 B = U_in[tidB];
    float2 T = U_in[tidT];

    float vorticity = 0.5 * float((R.y - L.y) - (T.x - B.x));

    VC_out[tid] = vorticity;

    f1bnd(VC_out, tid, -vorticity, dim);
}

// Vorticity Confinement 
[numthreads(8, 8, 1)]
void VorticityConfinement(uint2 tid : SV_DispatchThreadID)
{
    uint2 dim;
    W_out.GetDimensions(dim.x, dim.y);

    float vL = VC_in[max(0, tid - int2(1, 0))];
    float vR = VC_in[min(dim - 1, tid + int2(1, 0))];
    float vB = VC_in[max(0, tid - int2(0, 1))];
    float vT = VC_in[min(dim - 1, tid + int2(0, 1))];
    float vC = VC_in[tid];

    float2 eta = 0.5 * float2(abs(vT) - abs(vB), abs(vR) - abs(vL));
    eta = normalize(eta + float2(0.001, 0.001));

    float2 force = DeltaTime * Epsilon *vC* float2(eta.x, - eta.y);
    W_out[tid] = W_in[tid] + force;
}

// Apply Buoyancy 
[numthreads(8, 8, 1)]
void ApplyBuoyancy(uint2 tid : SV_DispatchThreadID)
{
    uint2 dim;
    W_out.GetDimensions(dim.x, dim.y);

    float Temp = T_in[tid];
    float Dens = D_in[tid];
    float AmbientTemperature = 0.0f;

    float force = 0.0f;
    if (Temp > AmbientTemperature)
     force = DeltaTime * ((Temp - AmbientTemperature) * Buoyancy - Dens * Weight);

    W_out[tid] = W_in[tid] + int2(0,1) * force;
}

// Add-force step
[numthreads(8, 8, 1)]
void Force(uint2 tid : SV_DispatchThreadID)
{
    uint2 dim;
    W_out.GetDimensions(dim.x, dim.y);

    float2 pos = (tid + 0.5) / dim.y;
    float amp = exp(-ForceExponent * distance(ForceOrigin, pos));

    W_out[tid] = W_in[tid] + ForceVector * amp * DeltaTime;
}

// Setup for Project step (divW calculation)
[numthreads(8, 8, 1)]
void ProjectSetup(uint2 tid : SV_DispatchThreadID)
{
    uint2 dim;
    W_in.GetDimensions(dim.x, dim.y);

    if (any(tid == 0) || any(tid == dim - 1)) return;

    int2 tidL = max(0, tid - int2(1, 0));
    int2 tidR = min(dim - 1, tid + int2(1, 0));
    int2 tidB = max(0, tid - int2(0, 1));
    int2 tidT = min(dim - 1, tid + int2(0, 1));

    float divergence = 0.5 * (W_in[tidR].x - W_in[tidL].x + W_in[tidT].y - W_in[tidB].y);
    //*dim.y;
    
   DivW_out[tid] = divergence;

   f1bnd(DivW_out, tid, divergence, dim);
  
    P_out[tid] = 0;
}

// Finishing for Project step (divergence free field calculation)
[numthreads(8, 8, 1)]
void Project(uint2 tid : SV_DispatchThreadID)
{
    uint2 dim;
    W_in.GetDimensions(dim.x, dim.y);

    if (any(tid == 0) || any(tid == dim - 1)) return;

    float P1 = P_in[max(tid - int2(1, 0), 1)];
    float P2 = P_in[min(tid + int2(1, 0), dim - 2)];
    float P3 = P_in[max(tid - int2(0, 1), 1)];
    float P4 = P_in[min(tid + int2(0, 1), dim - 2)];

    float2 u = W_in[tid] - 0.5 * float2(P2 - P1, P4 - P3);
    //*dim.y;

    U_out[tid] = u;
    f2bnd(U_out, tid, u, dim);
    
}

// Jacobi method with a scalar field
[numthreads(8, 8, 1)]
void Diffuse1(uint2 tid : SV_DispatchThreadID)
{
    uint2 dim;
    X1_out.GetDimensions(dim.x, dim.y);

    if (any(tid == 0) || any(tid == dim - 1)) return;

    float scalar = (X1_in[tid - int2(1, 0)] + X1_in[tid + int2(1, 0)] +
        X1_in[tid - int2(0, 1)] + X1_in[tid + int2(0, 1)] + Alpha * B1_in[tid]) / Beta;

    X1_out[tid] = scalar;

    f1bnd(X1_out, tid, scalar, dim);
    
}

// Jacobi method with a vector field
[numthreads(8, 8, 1)]
void Diffuse2(uint2 tid : SV_DispatchThreadID)
{   
    uint2 dim;
    X2_out.GetDimensions(dim.x, dim.y);

    if (any(tid == 0) || any(tid == dim - 1)) return;

    float2 vec = (X2_in[tid - int2(1, 0)] + X2_in[tid + int2(1, 0)] +
        X2_in[tid - int2(0, 1)] + X2_in[tid + int2(0, 1)] + Alpha * B2_in[tid]) / Beta;

    X2_out[tid] = vec;
    f2bnd(X2_out, tid, vec, dim);
}

// AdvecDensity step
[numthreads(8, 8, 1)]
void AdvectDensity(uint2 tid : SV_DispatchThreadID)
{
    uint2 dim;
    D_out.GetDimensions(dim.x, dim.y);

    if (any(tid == 0) || any(tid == dim - 1)) return;

    /*float2 uv = (tid + 0.5) / dim;
    float2 duv = U_in[tid] * DeltaTime;
    float2  pos = (float2) (uv - duv) * dim;*/

    float2 uv = (tid + 0.5);
    float2 duv = U_in[tid] * DeltaTime;
    float2  pos = (float2) (uv - duv);

    float dens = f1SampleCubic(D_in, pos, dim) * densityDissipation;
    //float dens = SampleBilinear(D_in, pos, dim) * densityDissipation;;

    D_out[tid] = dens;
    f1bnd(D_out, tid, dens, dim);
}

// Add-density-source step
[numthreads(8, 8, 1)]
void DensitySource(uint2 tid : SV_DispatchThreadID)
{
    uint2 dim;
    D_out.GetDimensions(dim.x, dim.y);

    float2 pos = (tid + 0.5)/ dim.y;
    float amp = exp(-ForceExponent * distance(ForceOrigin, pos));
    
    D_out[tid] = D_in[tid] + amp*densityAmount;
}

// AdvecTemperature step
[numthreads(8, 8, 1)]
void AdvectTemperature(uint2 tid : SV_DispatchThreadID)
{
    uint2 dim;
    T_out.GetDimensions(dim.x, dim.y);

    if (any(tid == 0) || any(tid == dim - 1)) return;

    /*float2 uv = (tid + 0.5) / dim;
    float2 duv = U_in[tid] * DeltaTime;
    float2  pos = (float2) (uv - duv) * dim;*/

    float2 uv = (tid + 0.5);
    float2 duv = U_in[tid] * DeltaTime;
    float2  pos = (float2) (uv - duv);

    float temp = f1SampleCubic(T_in, pos, dim) * temperatureDissipation;
    //float temp = SampleBilinear(T_in, pos, dim) * temperatureDissipation;
   
    T_out[tid] = temp;

    if (tid.x == 1) T_out[int2(0, tid.y)] = temp;
    if (tid.y == 1) T_out[int2(tid.x, 0)] = temp;
    if (tid.x == dim.x - 2) T_out[int2(dim.x - 1, tid.y)] = temp;
    if (tid.y == dim.y - 2) T_out[int2(tid.x, dim.y - 1)] = temp;
}

// Add-temperature-source step
[numthreads(8, 8, 1)]
void TemperatureSource(uint2 tid : SV_DispatchThreadID)
{
    uint2 dim;
    T_out.GetDimensions(dim.x, dim.y);

    float2 pos = (tid + 0.5) / dim.y;
    float amp = exp(-ForceExponent * distance(ForceOrigin, pos));
    T_out[tid] = T_in[tid] + amp*temperatureAmount;
}

